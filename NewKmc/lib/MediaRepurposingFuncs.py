'''
@author: moran.cohen
'''

import datetime
import re
# Generated by Selenium IDE
import time
import urllib.error
import urllib.parse
import urllib.request

from KalturaClient.Plugins.Core import *
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By

import DOM
import KmcBasicFuncs
import MySelenium


class MediaRepurposingFuncs:
    
    
    def __init__(self, webdrvr, logi):
        
        self.Wd = webdrvr
        self.logi = logi
        self.Wdobj = MySelenium.seleniumWebDrive()
        self.BasicFuncs = KmcBasicFuncs.basicFuncs()
        
        
        
    # This function select MediaReurposingID and run dry run
    def MediaRepurposing_DryRun(self,MediaReurposingID):      
        try:                                       
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_MRID.replace("TEXTTOREPLACE",MediaReurposingID)).click()
            return True    
        except Exception as Exp:
            print(Exp)
            return False
        
    
    # This function Verify DryRun alert and return JobId
    def MediaRepurposing_VerfiyAlertDryRun(self,MediaReurposingID,ExpectedAlertResult):      
        try:     
            ActualAlertResult = str(self.Wd.switch_to.alert.text)
            self.logi.appendMsg("INFO - Going to verify Alert of MediaRepurposing dry run .ActualAlertResult = " + ActualAlertResult)
            ActualAlertWithoutJob,ActualJobId= ActualAlertResult.split(' The batch JobId is ')
            if ActualAlertWithoutJob == ExpectedAlertResult:
                self.logi.appendMsg("INFO - Going to click OK on the Alert of MediaRepurposing dry run")
                self.Wd.switch_to.alert.accept()
                return True,ActualJobId
            else:
                return False
                
        except Exception as Exp:
            print(Exp)
            self.logi.appendMsg("FAIL - MediaRepurposing_VerfiyAlertDryRun")
            return False    
    
        
    # This function perform MediaRepurposing DryRun Identification by JobId
    def MediaRepurposing_DryRunIdentification(self,JobId):      
        try:     
            self.logi.appendMsg("INFO - Going to perform MediaRepurposing DryRun Identification by JobId .JobId = " + JobId)
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_ID).send_keys(JobId)
            time.sleep(1)
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_GETLOG_BTN).click()
            time.sleep(2)
            return True
                
        except Exception as Exp:
            print(Exp)
            self.logi.appendMsg("FAIL - MediaRepurposing_DryRunIdentification")
            return False    
    
     
     
    # This function perform MediaRepurposing DryRun Identification above 1000 by JobId
    def MediaRepurposing_DryRunIdentificationResultAbove1000(self,JobId):      
        try:  
            rcStatus = False   
            self.logi.appendMsg("INFO - Going to perform MediaRepurposing DryRun Identification by JobId .JobId = " + JobId)
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_ID, "Media repurposing dry run id", 10)    
            if rc == False:
                self.logi.appendMsg("FAIL - verifyElement Media repurposing dry run id")
                return False
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_ID).send_keys(JobId)
            time.sleep(2)
            MRStatus,MediaRepurposingLog = self.waitForMediaRepurposingLOGStatusReady(self.Wd,JobId)
            if not MRStatus:
                self.logi.appendMsg("FAIL - The JobId Media Repurposing log \"" + JobId + "\"  was not found.")
                return False 
            else:
                self.logi.appendMsg("PASS - The JobId Media Repurposing log \"" + JobId + "\" was found successfully as expected")

            MediaRepurposingLogResult = MediaRepurposingLog.split("Dry run result is too big, use the following link: ")
            # Return url feed
            self.logi.appendMsg("INFO - MediaRepurposingLogResult  =  " + MediaRepurposingLogResult[1])
            rc,contentData = self.GetMediaRepurposingURLContent(MediaRepurposingLogResult[1])
            if not rc:
                self.logi.appendMsg("FAIL - Get MediaRepurposing URL Content " + contentData)
                return False 
            else:
                self.logi.appendMsg("INFO - Going to verify MediaRepurposing URL Content Entries.")
                rc = self.VerifyMediaRepurposingContentEntries(contentData.decode("utf-8"),1000)
                if not rc:
                    self.logi.appendMsg("FAIL - Verify MediaRepurposing URL Content Entries.")
                    return False
                   
            return True
                 
        except Exception as Exp:
            print(Exp)
            self.logi.appendMsg("FAIL - MediaRepurposing_DryRunIdentificationResultAbove1000")
            return False    
        
        
        
    
    # This function perform MediaRepurposing DryRun Identification above 1000 by JobId
    def MediaRepurposing_DryRunIdentificationResultUntil1000(self,JobId,ExpectedCountEntries=1000,EntryId=None,EntryName=None):      
        try:     
            self.logi.appendMsg("INFO - Going to perform MediaRepurposing DryRun Identification by JobId .JobId = " + JobId)
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_ID, "Media repurposing dry run id", 15)    
            if rc == False:
                self.logi.appendMsg("FAIL - verifyElement Media repurposing dry run id")
                return False
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_ID).send_keys(JobId)
            time.sleep(4)
            MRStatus,MediaRepurposingLog = self.waitForMediaRepurposingLOGStatusReady(self.Wd,JobId,ExpectedCountEntries,False,EntryId,EntryName)
            if not MRStatus:
                self.logi.appendMsg("FAIL - The JobId Media Repurposing log \"" + JobId + "\"  was not found.")
                return False 
            else:
                self.logi.appendMsg("PASS - The JobId Media Repurposing log \"" + JobId + "\" was found successfully as expected")

            self.logi.appendMsg("INFO - MediaRepurposingLogResult  =  " + MediaRepurposingLog)
            #Check that the paginator exists
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG_PAGINATOR, "Media repurposing paginator", 10)    
            if rc == False:
                self.logi.appendMsg("FAIL - VerifyElement Media repurposing paginator")
                return False
                       
            return True
                 
        except:
            self.logi.appendMsg("FAIL - MediaRepurposing_DryRunIdentificationResultLess1000")
            return False    
     
       
        
    # This function wait until MediaRepurposing LOG is in status ready
    # FlagResultAbove1000 parameter -  If FlagResultAbove1000 = True --> Expected log with above than 1000 logic --> URL result.
    # FlagResultAbove1000 parameter -  If FlagResultAbove1000 = False --> Expected log with less than 1000 logic --> Table result.
    # ExpectedCountEntries parameter  - Expected number of entries when log result is until 1000 (FlagResultAbove1000 = False)
    # Entry Id - In case of ExpectedCountEntries = 1--> Verify the entry data
    # Entry Name - In case of ExpectedCountEntries = 1--> Verify the entry data
    def waitForMediaRepurposingLOGStatusReady(self,webdrvr,JobId,ExpectedCountEntries=1000,FlagResultAbove1000=True,EntryId=None,EntryName=None,itimeout=300):
        bStatusReady = False
        startTime = time.time()
        # Save window 
        primTab = self.Wd.window_handles[0]
        #Index of log window frame for loop
        i=0
        while not bStatusReady:
            self.Wd.switch_to.window(primTab)
            self.Wd.switch_to.default_content()
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_GETLOG_BTN).click()
            time.sleep(3)
            #Switch to next log window index
            self.Wd.switch_to.frame(i)
            try:
                time.sleep(2)
                rc1 = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG, "MR dryrun log", 10)    
                if rc1 == False:
                    rc2 = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG_LESS1000, "MR dryrun log less 1000", 10)
                    if rc2 == False:
                        self.logi.appendMsg("FAIL - VerifyElement MR dryrun log.")
                    else:
                        lineText = str(self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_LOG_LESS1000).text) #TextBox for table log result (until 1000 )                            
                else:
                    lineText = str(self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_LOG).text) #TextBox for "Dry run results are not ready yet"
                              
                if lineText.find("Dry run results are not ready yet") >= 0:
                    
                    self.Wd.switch_to.default_content()
                    #Check that the Log close button
                    rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG_CLOSE_BTN, "Log close button", 10)    
                    if rc == False:
                        self.logi.appendMsg("FAIL - VerifyElement Log close button")
                    self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DRYRUN_LOG_CLOSE_BTN).click()
                    #Increase index for next log window
                    i=i+1
                    #Time for waiting to next log    
                    time.sleep(5)
                else:
                    if FlagResultAbove1000 == True: #URL log result
                        if lineText.find("Dry run result is too big, use the following link: ") >= 0: 
                            bStatusReady = True
                            #### Close last log window
                            self.Wd.switch_to.default_content()
                            #Check that the Log close button
                            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG_CLOSE_BTN, "Log close button", 10)    
                            if rc == False:
                                self.logi.appendMsg("FAIL - VerifyElement Log close button")
                            self.Wd.implicitly_wait(2)
                            time.sleep(2)
                            element = self.Wd.find_element(By.CSS_SELECTOR, "body")
                            actions = ActionChains(self.Wd)
                            actions.move_to_element(element).perform()
                            self.Wd.find_element(By.CSS_SELECTOR, ".ui-state-focus > .ui-button-text").click()
                            
                            
                    elif FlagResultAbove1000 == False: #Table log Result
                        if lineText.find("Dry Run Result for " + JobId + " has [" + str(ExpectedCountEntries) + "] objects") >= 0:
                            bStatusReady = True
                            if int(ExpectedCountEntries) == 1: #If there is only one entry 
                                if EntryId !=None:                                
                                    rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.MR_PROFILE_LOGS_ENTRY_DATA.replace("TEXTTOREPLACE",EntryId), "Media repurposing log - EntryId", 10)    
                                    if rc == False:
                                        self.logi.appendMsg("FAIL - verifyElement Media repurposing log entry id")
                                        return False
                                if EntryName !=None:
                                    rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.MR_PROFILE_LOGS_ENTRY_DATA.replace("TEXTTOREPLACE",EntryName), "Media repurposing log - EntryName", 10)    
                                    if rc == False:
                                        self.logi.appendMsg("FAIL - verifyElement Media repurposing log entry name")
                                        return False
                                     
                            elif ExpectedCountEntries == 1000: #If there are 1000 entries
                                self.logi.appendMsg("INFO - Going to verify MediaRepurposing Entries Table.")
                                rc,ContentData = self.VerifyMediaRepurposingEntriesTable()
                                if rc == False:
                                    self.logi.appendMsg("FAIL - Verify MediaRepurposing Entries Table.")
                                    return False
                                self.logi.appendMsg("PASS - Verify MediaRepurposing Entries Table.")
                                self.logi.appendMsg("INFO - Going to verify MediaRepurposing URL Content Entries.")
                                rc= self.VerifyMediaRepurposingContentEntries(ContentData, ExpectedCountEntries, FlagResultAbove1000)
                                if not rc:
                                    self.logi.appendMsg("FAIL - Verify MediaRepurposing URL Content Entries.")
                                    return False
                
                        #### Close last log window
                        time.sleep(4)        
                        self.Wd.switch_to.default_content()
                        #Check that the Log close button
                        rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_MR_DRYRUN_LOG_CLOSE_BTN, "Log close button", 10)    
                        if rc == False:
                            self.logi.appendMsg("FAIL - VerifyElement Log close button")
                        self.Wd.implicitly_wait(2)
                        time.sleep(2)
                        
                        # Close the MR log window
                        locatorCloseButton = ('xpath', DOM.ADMINCONSOLE_MR_DRYRUN_LOG_CLOSE_BTN)    
                        ChildElementClose = len(self.BasicFuncs.get_elements(self.Wd,locatorCloseButton))
                        for i in range(0, ChildElementClose):
                            try:
                                self.BasicFuncs.get_elements(self.Wd,locatorCloseButton)[i].click()
                                break
                            except Exception as Exp:
                                pass
                            
                         
            except Exception as Exp:
                print(Exp)
                # Return to main window  
                self.Wd.switch_to.window(primTab) 
                return False,"NoMediaRepurposingLog"
                
            if startTime + itimeout < time.time():
                # Return to the main Media repurposing profiles
                self.Wd.switch_to.window(primTab)
                return False,lineText
        # Return to the main Media repurposing profiles    
        self.Wd.switch_to.window(primTab) 
        return True,lineText
    

     
    # This function delete MediaRepurposing profile
    # MediaRepurposingAction options :configureMediaRepurposing,enable,dryRun,remove,disable
    def MediaRepurposingProfileAction(self,MediaRepurposingProfileName,MediaRepurposingAction):      
        try:     
            rowsArr = self.Wd.find_elements_by_xpath("//tr[*]")
            for i in (rowsArr):
                if i.text.find(MediaRepurposingProfileName)>=0:
                    selectOption = i.find_element_by_xpath(DOM.ADMINCONSOLE_MR_OPTIONS)
                    selectOption.click()
                    time.sleep(3)
                    #selectOption.find_element_by_xpath(DOM.ADMINCONSOLE_MR_REMOVE).click()
                    selectOption.find_element_by_xpath(DOM.ADMINCONSOLE_MR_ACTION.replace("TEXTTOREPLACE",MediaRepurposingAction)).click()
                    time.sleep(2) 
                    # approve alert message
                    #alert = self.Wd.switch_to_alert()
                    alert = self.Wd.switch_to.alert
                    # There are two alert on remove mode
                    # There is one alert on enable
                    time.sleep(1)
                    if MediaRepurposingAction == "remove":
                        alert.accept()
                    time.sleep(2)
                    alert.accept()
                    self.Wd.switch_to.default_content()
                    break
               
                           
            return True
                 
                 
        except Exception as Exp:
            print(Exp)
            return False
        
    # This function create MediaRepurposing profile
    def MediaRepurposingProfileCreate(self,MediaRepurposingProfileName,MediaRepurposingTemplateType,MediaRepurposingEntryIdEqual=None,MediaRepurposingEntryName=None,MediaRepurposingMailTo=None,MediaRepurposingSender=None,MediaRepurposingMailSubject=None,MediaRepurposingMailMessage=None,MediaRepurposingMailFooter=None, MediaRepurposingMailLink=None,MediaRepurposingTaskTime="0",MediaRepurposingMaxEntries="5"):      
        try:                
            self.logi.appendMsg('media repurposing screen opened')
            # create a function to run it for all templates
            self.logi.appendMsg('Add new MR from template')  
            self.Wd.find_element_by_xpath(DOM.MR_CHOOSE_TEMPLATE).click() #MR_CHOOSE_TEMPLATE
            time.sleep(1)
            self.Wd.find_element_by_xpath(DOM.MR_SET_TEMPLATE.replace("TEXTTOREPLACE",MediaRepurposingTemplateType)).click() 
            time.sleep(1)
            submitbtns = self.Wd.find_elements_by_xpath(DOM.MR_CREATE_BTN)[1].click() #MR_CREATE_BTN
            time.sleep(1)
            try:
                self.Wd.find_element_by_xpath(DOM.MR_NAME).clear() #MR_NAME
                self.Wd.find_element_by_xpath(DOM.MR_NAME).send_keys(MediaRepurposingProfileName)
            except: 
                self.logi.appendMsg('create media repurposing profile screen opened')
                testStatus = False 
            self.Wd.find_element_by_xpath(DOM.MR_MAX_ENTRIES).clear() #MR_MAX_ENTRIES
            self.Wd.find_element_by_xpath(DOM.MR_MAX_ENTRIES).send_keys(MediaRepurposingMaxEntries)
            time.sleep(1)
            self.Wd.find_element_by_xpath(DOM.MR_CREATED_AT_LESS_THAN_OR_EQUAL).clear() #MR_CREATED_AT_LESS_THAN_OR_EQUAL
            time.sleep(1)
            # Update date
            x = datetime.datetime.now() + datetime.timedelta(days=1) # add one day to handle recent entries
            year = str(int(x.strftime("%Y")))  
            month = str(int(x.strftime("%m")))
            day = str(int(x.strftime("%d")))
            theDate = year + "." + month + "." + day 
            self.Wd.find_element_by_xpath(DOM.MR_CREATED_AT_LESS_THAN_OR_EQUAL).send_keys(theDate)
            
            time.sleep(5)
            self.Wd.find_element_by_xpath(DOM.MR_EXPAND_FILTER).click() #MR_EXPAND_FILTER
            time.sleep(1)
            if MediaRepurposingEntryName != None:
                self.Wd.find_element_by_xpath(DOM.MR_ENTRY_NAME_LIKE).clear() #MR_ENTRY_NAME_LIKE
                self.Wd.find_element_by_xpath(DOM.MR_ENTRY_NAME_LIKE).send_keys(MediaRepurposingEntryName)
             
            self.Wd.find_element_by_xpath(DOM.MR_TASK_TIME).clear()
            self.Wd.find_element_by_xpath(DOM.MR_TASK_TIME).send_keys("0") 
             
            if MediaRepurposingMailTo != None:
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_TO).clear()
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_TO).send_keys(MediaRepurposingMailTo)
            if MediaRepurposingSender != None: 
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_SENDER).clear()
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_SENDER).send_keys(MediaRepurposingSender)
            if MediaRepurposingMailSubject != None:
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_SUBJECT).clear()
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_SUBJECT).send_keys(MediaRepurposingMailSubject)
            if MediaRepurposingMailMessage != None:    
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_MESSAGE).clear()
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_MESSAGE).send_keys(MediaRepurposingMailMessage)              
            if MediaRepurposingMailFooter != None:    
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_FOOTER).clear()
                self.Wd.find_element_by_xpath(DOM.MR_MAIL_FOOTER).send_keys(MediaRepurposingMailFooter)                                                     
            if MediaRepurposingMailLink != None:                                  
                self.Wd.find_element_by_xpath(DOM.MR_ENTRY_LINK).clear()
                self.Wd.find_element_by_xpath(DOM.MR_ENTRY_LINK).send_keys(MediaRepurposingMailLink)
            if MediaRepurposingTaskTime == "0" or MediaRepurposingTaskTime != None:
                self.Wd.find_element_by_xpath(DOM.MR_TASK_TIME).clear()
                self.Wd.find_element_by_xpath(DOM.MR_TASK_TIME).send_keys(MediaRepurposingTaskTime)
            if MediaRepurposingEntryIdEqual != None:                                  
                self.Wd.find_element_by_xpath(DOM.MR_ENTRYID_EQUAL).clear()
                self.Wd.find_element_by_xpath(DOM.MR_ENTRYID_EQUAL).send_keys(MediaRepurposingEntryIdEqual)    
            time.sleep(1)
            self.Wd.find_element_by_xpath(DOM.MR_SAVE_BTN).click()
            time.sleep(2)
            # Verify if there is error alert when saving
            try:
                ActualAlertResult = str(self.Wd.switch_to.alert.text) # Exist alert  
                print(ActualAlertResult)  
                return False   
            except Exception as Exp: # No alert
                pass
                            
            return True
                 
                 
        except Exception as Exp:
            print(Exp)
            return False    

    
    # This function navigates to _MediaRepurposing profile screen by partner id.
    def AdminConsole_Navigate_MediaRepurposing(self, partnerID):
        try:
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_PUBLISHER_ID).click()
            time.sleep(1)
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.ADMINCONSOLE_FILTER_TEXT, "MR Filter text", 10)    
            if rc == False:
                self.logi.appendMsg("FAIL - verifyElement MR Filter text")
                return False
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_FILTER_TEXT).send_keys(partnerID)
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_DO_FILTER).click() 
            self.Wd.find_element_by_xpath(DOM.MACONSOLE_ACTIONS).click()
            self.Wd.find_element_by_xpath(DOM.ADMINCONSOLE_MR_OPTION).click()
            return True
        
        except:
            return False
        
        
    # This function waits for entry to get the status Delete with given timeout     
    def WaitForEntryDelete(self,client,entryid,timeOut=300):
        try:
            startTime = time.time()
            bEntryDelete = False
            print('Waiting for entry status=DELETED...')
            while (time.time()<=startTime+ timeOut and not bEntryDelete):
                result = client.baseEntry.get(entryid,None)
                time.sleep(1)
                if result.status.value==KalturaEntryStatus.DELETED:
                    bEntryDelete = True
                if result.status.value==KalturaEntryStatus.ERROR_CONVERTING or result.status.value==KalturaEntryStatus.ERROR_IMPORTING:
                    return 'error'
            if result.status.value==KalturaEntryStatus.PRECONVERT:
                return 'timeout'
           
            return bEntryDelete
        
        except Exception as Exp:
            print(Exp)
            if str(Exp) == str('Entry id "' + entryid + '" not found (ENTRY_ID_NOT_FOUND)'):
                return True
            else:
                return False
            
    
    # This function get MediaRepurposing profile Id by MediaRepurposingProfileName
    def GetMediaRepurposingProfileId(self,MediaRepurposingProfileName):      
        try:     
            rowsArr = self.Wd.find_elements_by_xpath("//tr[*]")
            indexTable = 0
            MediaRepurposingProfileId  = None
            for i in (rowsArr):
                if i.text.find(MediaRepurposingProfileName)>=0:
                    # Get first column with MediaRepurposingProfileId value
                    MediaRepurposingProfileId = str(i.find_element_by_xpath(".//td[1]").text)   
                    break
                indexTable+=1
                           
            return True,MediaRepurposingProfileId
                 
                 
        except Exception as Exp:
            print(Exp)
            return False,MediaRepurposingProfileId
    
    # This function return the content/string/feed inside the url
    def GetMediaRepurposingURLContent(self,url):              
        try:            
            file = urllib.request.urlopen(url)
            data = file.read()
            file.close()
            
            return True,data
                        
        except Exception as e:
            print(e)
            return False
        
      
              
    # This function verify MediaRepurposing Content Entries:
    # 1. Number of the return entries is less or equal to maxEntries
    # 2. Return entries doesn't repeat on the MR feed content.
    # Parameter - contentData = string of entries feed.
    # Parameter - maxEntries = max entries on that should appear on the MR feed content.
    # Paramerer - FlagResultAbove1000 = If return entries should be above or less than 1000.default = above/equal 1000 entries  
    def VerifyMediaRepurposingContentEntries(self,contentData,maxEntries,FlagResultAbove1000=True):
        try:
            rcStatus = True             
            if FlagResultAbove1000 == True:
                rows = contentData.count('\n') - 1 # -1 because of the title of the feed
                if rows >= maxEntries:
                    self.logi.appendMsg("PASS - MediaRepurposing URL Content return more than " + str(maxEntries) + " entries.rows = " + str(rows))
                else:    
                    self.logi.appendMsg("FAIL - MediaRepurposing URL Content return less than  " + str(maxEntries) + " entries.rows = " + str(rows))
                    return False
            if FlagResultAbove1000 == False:
                rows = contentData.count('\n') # No title
                if rows <= maxEntries:
                    self.logi.appendMsg("PASS - MediaRepurposing URL Content return less than " + str(maxEntries) + " entries.rows = " + str(rows))
                else:    
                    self.logi.appendMsg("FAIL - MediaRepurposing URL Content return more than  " + str(maxEntries) + " entries.rows = " + str(rows))
                    return False     
            rcStatus = True
            self.logi.appendMsg("INFO - Going to verify that each entry appears just once on MediaRepurposing URL Content.")
            for i in range(1, rows):
                try:        
                    line = contentData.splitlines()[i]
                    showNumber = len([m.start() for m in re.finditer(line, contentData)]) # Return the number of finding each line on contentData
                    if showNumber > 1:
                        #Special characters handling that causes problem with showNumber count - > Search just by entryid
                        try:
                            rcLine = line.split(',')
                        except Exception as Exp:
                            print(Exp)    
                        showNumber = len([m.start() for m in re.finditer(rcLine[0], contentData)])
                        if showNumber > 1:
                            self.logi.appendMsg("FAIL - Entry " + str(line) + " appears more than once . showNumber = " + str(showNumber))
                            rcStatus = False
                        #rcStatus = False
                except Exception as Exp:
                    print(Exp)
                    #Special characters handling that cause exception on finditer -> Search just by entryid
                    if str(Exp) == "unexpected end of regular expression" or str(Exp) == "bad character range":
                        self.logi.appendMsg("INFO - Special characters handling - Entry line " + str(i) + " gets error " + str(Exp) + ". line = " + str(line))
                        rcLine = line.split(',')
                        showNumber = len([m.start() for m in re.finditer(rcLine[0], contentData)])
                        if showNumber > 1:
                            self.logi.appendMsg("FAIL - Entry " + str(line) + " appears more than once . showNumber = " + str(showNumber))
                            rcStatus = False
                        pass            
            
            if rcStatus == False:
                self.logi.appendMsg("FAIL - Entries appear more than once on MR url content.")
                return False
            
            self.logi.appendMsg("PASS - Entries do not appear more than once on MR url content.")
            
            return True        
                
        except Exception as e:
            print(e)
            return False
        
        
        
    # The function verify the entries table of MediaRepurposing log.
    # ExpectedPages = Expected pages to verify
    # ExpectedPageSize = Expected entries in each page.
    def VerifyMediaRepurposingEntriesTable(self,ExpectedPages = "10",ExpectedPageSize = "100"):      
        try:     
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.MR_PROFILE_LOGS_PAGINATOR.replace("TEXTTOREPLACE",ExpectedPages), "Media repurposing log - Paginator", 10)
            if rc == False:
                self.logi.appendMsg("FAIL - verifyElement Media repurposing log Paginator.Pages = " + ExpectedPages)
                return False
            rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.MR_PROFILE_LOGS_PAGESIZE.replace("TEXTTOREPLACE",ExpectedPageSize), "Media repurposing log - PageSize", 10)
            if rc == False:
                self.logi.appendMsg("FAIL - verifyElement Media repurposing log PageSize.PageSize combobox = " + ExpectedPageSize)
                return False  
            #Select page size 100 on combobox
            self.logi.appendMsg("INFO - Going to verify Media repurposing log PageSize.PageSize combobox = " + ExpectedPageSize)
            self.Wd.find_element_by_xpath(DOM.MR_PROFILE_LOGS_PAGESIZE.replace("TEXTTOREPLACE",ExpectedPageSize)).click()
            ContentData = ""
            for i in range(1, int(ExpectedPages)+1):#Loop of pages(10)
                # Press on page index - 1 until 10
                time.sleep(1)    
                self.Wd.find_element_by_xpath(DOM.MR_PROFILE_LOGS_PAGINATOR.replace("TEXTTOREPLACE",str(i))).click()
                time.sleep(2)
                rc = self.BasicFuncs.verifyElement(self.Wd,self.logi,DOM.MR_PROFILE_LOGS_ENTRY_ITEMS, "Media repurposing log - Entries counter every page. Page = " + str(i), 10)
                if rc == False:
                    self.logi.appendMsg("FAIL - verifyElement Media repurposing log - Entries COUNTER on every page.Page = " + str(i))
                    return False  
                countEntries = len(self.Wd.find_elements_by_xpath(DOM.MR_PROFILE_LOGS_ENTRY_ITEMS)) # count of entries every page
                if countEntries != int(ExpectedPageSize):
                    self.logi.appendMsg("FAIL - Media repurposing log PageSize combobox.Expected PageSize = " + str(ExpectedPageSize) + ", Actual PageSize = " + str(countEntries))
                    return False                                    
                for j in range(1, int(countEntries)+1):#Loop of entries
                    try:
                        Entryid = str(self.Wd.find_element_by_xpath(DOM.MR_PROFILE_LOGS_ENTRY_ID.replace("TEXTTOREPLACE",str(j))).text)
                        EntryName = str(self.Wd.find_element_by_xpath(DOM.MR_PROFILE_LOGS_ENTRY_NAME.replace("TEXTTOREPLACE",str(j))).text)
                    except Exception as Exp:#Special characters handling 
                        EntryName = ""
                        pass
                    # Save all entries on string parameter
                    ContentData = ContentData + Entryid + " , " + EntryName + "\n"
                           
            return True,ContentData
                 
                 
        except Exception as Exp:
            print(Exp)
            return False,ContentData
        